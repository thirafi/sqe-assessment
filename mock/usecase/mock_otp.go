// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/otp.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	model "SQ-Assessment/model"
	payload "SQ-Assessment/model/payload"
	util "SQ-Assessment/util"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOtpUsecase is a mock of OtpUsecase interface.
type MockOtpUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockOtpUsecaseMockRecorder
}

// MockOtpUsecaseMockRecorder is the mock recorder for MockOtpUsecase.
type MockOtpUsecaseMockRecorder struct {
	mock *MockOtpUsecase
}

// NewMockOtpUsecase creates a new mock instance.
func NewMockOtpUsecase(ctrl *gomock.Controller) *MockOtpUsecase {
	mock := &MockOtpUsecase{ctrl: ctrl}
	mock.recorder = &MockOtpUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOtpUsecase) EXPECT() *MockOtpUsecaseMockRecorder {
	return m.recorder
}

// CreateOtp mocks base method.
func (m *MockOtpUsecase) CreateOtp(username string) (payload.CreateOtpResponse, util.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOtp", username)
	ret0, _ := ret[0].(payload.CreateOtpResponse)
	ret1, _ := ret[1].(util.Error)
	return ret0, ret1
}

// CreateOtp indicates an expected call of CreateOtp.
func (mr *MockOtpUsecaseMockRecorder) CreateOtp(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOtp", reflect.TypeOf((*MockOtpUsecase)(nil).CreateOtp), username)
}

// UpdateOtp mocks base method.
func (m *MockOtpUsecase) UpdateOtp(otp *model.Otp) util.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOtp", otp)
	ret0, _ := ret[0].(util.Error)
	return ret0
}

// UpdateOtp indicates an expected call of UpdateOtp.
func (mr *MockOtpUsecaseMockRecorder) UpdateOtp(otp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOtp", reflect.TypeOf((*MockOtpUsecase)(nil).UpdateOtp), otp)
}

// ValidateOtp mocks base method.
func (m *MockOtpUsecase) ValidateOtp(req payload.OtpActionRequest) (payload.ValidateOtpResponse, util.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateOtp", req)
	ret0, _ := ret[0].(payload.ValidateOtpResponse)
	ret1, _ := ret[1].(util.Error)
	return ret0, ret1
}

// ValidateOtp indicates an expected call of ValidateOtp.
func (mr *MockOtpUsecaseMockRecorder) ValidateOtp(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateOtp", reflect.TypeOf((*MockOtpUsecase)(nil).ValidateOtp), req)
}
