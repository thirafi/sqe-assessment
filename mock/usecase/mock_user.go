// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/user.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	model "SQ-Assessment/model"
	payload "SQ-Assessment/model/payload"
	util "SQ-Assessment/util"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockUserUsecase is a mock of UserUsecase interface.
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase.
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance.
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserUsecase) CreateUser(req *payload.CreateUserRequest) (payload.CreateUserResponse, util.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", req)
	ret0, _ := ret[0].(payload.CreateUserResponse)
	ret1, _ := ret[1].(util.Error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserUsecaseMockRecorder) CreateUser(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserUsecase)(nil).CreateUser), req)
}

// DeleteUser mocks base method.
func (m *MockUserUsecase) DeleteUser(id uint) util.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(util.Error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserUsecaseMockRecorder) DeleteUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserUsecase)(nil).DeleteUser), id)
}

// GetListUsers mocks base method.
func (m *MockUserUsecase) GetListUsers() ([]model.User, util.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListUsers")
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(util.Error)
	return ret0, ret1
}

// GetListUsers indicates an expected call of GetListUsers.
func (mr *MockUserUsecaseMockRecorder) GetListUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListUsers", reflect.TypeOf((*MockUserUsecase)(nil).GetListUsers))
}

// GetUser mocks base method.
func (m *MockUserUsecase) GetUser(id uint) (model.User, util.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", id)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(util.Error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserUsecaseMockRecorder) GetUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserUsecase)(nil).GetUser), id)
}

// LoginUser mocks base method.
func (m *MockUserUsecase) LoginUser(ctx *gin.Context, Code, State string) (payload.LoginUserResponse, util.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, Code, State)
	ret0, _ := ret[0].(payload.LoginUserResponse)
	ret1, _ := ret[1].(util.Error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockUserUsecaseMockRecorder) LoginUser(ctx, Code, State interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockUserUsecase)(nil).LoginUser), ctx, Code, State)
}

// UpdateUser mocks base method.
func (m *MockUserUsecase) UpdateUser(user *model.User) util.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(util.Error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserUsecaseMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserUsecase)(nil).UpdateUser), user)
}
